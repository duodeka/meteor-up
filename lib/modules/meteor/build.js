'use strict';

require('babel-polyfill');
require('source-map-support/register');

var spawn = require('child_process').spawn;
var archiver = require('archiver');
var fs = require('fs');
var pathResolve = require('path').resolve;
var _ = require('underscore');

function buildApp(appPath, buildOptions) {
  return new Promise(function (resolve, reject) {
    var callback = function callback(err) {
      if (err) {
        return reject(err);
      }
      resolve();
    };
    buildMeteorApp(appPath, buildOptions, function (code) {
      if (code === 0) {
        archiveIt(buildOptions.buildLocation, callback);
      } else {
        console.log("\n=> Build Error. Check the logs printed above.");
        callback(new Error("build-error"));
      }
    });
  });
}

function buildMeteorApp(appPath, buildOptions, callback) {
  var executable = buildOptions.executable || 'meteor';
  var args = ["build", "--directory", buildOptions.buildLocation, "--architecture", "os.linux.x86_64", "--server", "http://localhost:3000"];

  if (buildOptions.debug) {
    args.push("--debug");
  }

  if (buildOptions.mobileSettings) {
    args.push('--mobile-settings');
    args.push(JSON.stringify(buildOptions.mobileSettings));
  }

  if (buildOptions.serverOnly) {
    args.push('--server-only');
  }

  var isWin = /^win/.test(process.platform);
  if (isWin) {
    // Sometimes cmd.exe not available in the path
    // See: http://goo.gl/ADmzoD
    executable = process.env.comspec || "cmd.exe";
    args = ["/c", "meteor"].concat(args);
  }

  var options = { cwd: appPath };
  var meteor = spawn(executable, args, options);
  var stdout = "";
  var stderr = "";

  meteor.stdout.pipe(process.stdout, { end: false });
  meteor.stderr.pipe(process.stderr, { end: false });

  meteor.on('error', function (e) {
    console.log(options);
    console.log(e);
  });
  meteor.on('close', callback);
}

function archiveIt(buildLocation, callback) {
  callback = _.once(callback);
  var bundlePath = pathResolve(buildLocation, 'bundle.tar.gz');
  var sourceDir = pathResolve(buildLocation, 'bundle');

  var output = fs.createWriteStream(bundlePath);
  var archive = archiver('tar', {
    gzip: true,
    gzipOptions: {
      level: 6
    }
  });

  archive.pipe(output);
  output.once('close', callback);

  archive.once('error', function (err) {
    console.log("=> Archiving failed:", err.message);
    callback(err);
  });

  archive.directory(sourceDir, 'bundle').finalize();
}

module.exports = buildApp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkLmpzIl0sIm5hbWVzIjpbInNwYXduIiwicmVxdWlyZSIsImFyY2hpdmVyIiwiZnMiLCJwYXRoUmVzb2x2ZSIsInJlc29sdmUiLCJfIiwiYnVpbGRBcHAiLCJhcHBQYXRoIiwiYnVpbGRPcHRpb25zIiwiUHJvbWlzZSIsInJlamVjdCIsImNhbGxiYWNrIiwiZXJyIiwiYnVpbGRNZXRlb3JBcHAiLCJjb2RlIiwiYXJjaGl2ZUl0IiwiYnVpbGRMb2NhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJFcnJvciIsImV4ZWN1dGFibGUiLCJhcmdzIiwiZGVidWciLCJwdXNoIiwibW9iaWxlU2V0dGluZ3MiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VydmVyT25seSIsImlzV2luIiwidGVzdCIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsImVudiIsImNvbXNwZWMiLCJjb25jYXQiLCJvcHRpb25zIiwiY3dkIiwibWV0ZW9yIiwic3Rkb3V0Iiwic3RkZXJyIiwicGlwZSIsImVuZCIsIm9uIiwiZSIsIm9uY2UiLCJidW5kbGVQYXRoIiwic291cmNlRGlyIiwib3V0cHV0IiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJhcmNoaXZlIiwiZ3ppcCIsImd6aXBPcHRpb25zIiwibGV2ZWwiLCJtZXNzYWdlIiwiZGlyZWN0b3J5IiwiZmluYWxpemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFFBQVFDLFFBQVEsZUFBUixFQUF5QkQsS0FBckM7QUFDQSxJQUFJRSxXQUFXRCxRQUFRLFVBQVIsQ0FBZjtBQUNBLElBQUlFLEtBQUtGLFFBQVEsSUFBUixDQUFUO0FBQ0EsSUFBSUcsY0FBY0gsUUFBUSxNQUFSLEVBQWdCSSxPQUFsQztBQUNBLElBQUlDLElBQUlMLFFBQVEsWUFBUixDQUFSOztBQUVBLFNBQVNNLFFBQVQsQ0FBa0JDLE9BQWxCLEVBQTJCQyxZQUEzQixFQUF5QztBQUN2QyxTQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDTCxPQUFELEVBQVVN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RmUsR0FBaEIsQ0FBZDs7QUFPQUgsVUFBUVQsSUFBUixDQUFhTyxNQUFiO0FBQ0FBLFNBQU9ILElBQVAsQ0FBWSxPQUFaLEVBQXFCakMsUUFBckI7O0FBRUFzQyxVQUFRTCxJQUFSLENBQWEsT0FBYixFQUFzQixVQUFTaEMsR0FBVCxFQUFjO0FBQ2xDSyxZQUFRQyxHQUFSLENBQVksc0JBQVosRUFBb0NOLElBQUl5QyxPQUF4QztBQUNBMUMsYUFBU0MsR0FBVDtBQUNELEdBSEQ7O0FBS0FxQyxVQUFRSyxTQUFSLENBQWtCUixTQUFsQixFQUE2QixRQUE3QixFQUF1Q1MsUUFBdkM7QUFDRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQm5ELFFBQWpCIiwiZmlsZSI6ImJ1aWxkLmpzIiwic291cmNlUm9vdCI6IkM6L3dhbXA2NC93d3cvbWV0ZW9yLXVwL3NyYyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzcGF3biA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKS5zcGF3bjtcclxudmFyIGFyY2hpdmVyID0gcmVxdWlyZSgnYXJjaGl2ZXInKTtcclxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcclxudmFyIHBhdGhSZXNvbHZlID0gcmVxdWlyZSgncGF0aCcpLnJlc29sdmU7XHJcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xyXG5cclxuZnVuY3Rpb24gYnVpbGRBcHAoYXBwUGF0aCwgYnVpbGRPcHRpb25zKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IGNhbGxiYWNrID0gKGVycikgPT4ge1xyXG4gICAgICBpZihlcnIpIHtcclxuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XHJcbiAgICAgIH1cclxuICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIGJ1aWxkTWV0ZW9yQXBwKGFwcFBhdGgsIGJ1aWxkT3B0aW9ucywgZnVuY3Rpb24oY29kZSkge1xyXG4gICAgICBpZiAoY29kZSA9PT0gMCkge1xyXG4gICAgICAgIGFyY2hpdmVJdChidWlsZE9wdGlvbnMuYnVpbGRMb2NhdGlvbiwgY2FsbGJhY2spO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiXFxuPT4gQnVpbGQgRXJyb3IuIENoZWNrIHRoZSBsb2dzIHByaW50ZWQgYWJvdmUuXCIpO1xyXG4gICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcihcImJ1aWxkLWVycm9yXCIpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1aWxkTWV0ZW9yQXBwKGFwcFBhdGgsIGJ1aWxkT3B0aW9ucywgY2FsbGJhY2spIHtcclxuICB2YXIgZXhlY3V0YWJsZSA9IGJ1aWxkT3B0aW9ucy5leGVjdXRhYmxlIHx8ICdtZXRlb3InO1xyXG4gIHZhciBhcmdzID0gW1xyXG4gICAgXCJidWlsZFwiLCBcIi0tZGlyZWN0b3J5XCIsIGJ1aWxkT3B0aW9ucy5idWlsZExvY2F0aW9uLFxyXG4gICAgXCItLWFyY2hpdGVjdHVyZVwiLCBcIm9zLmxpbnV4Lng4Nl82NFwiLFxyXG4gICAgXCItLXNlcnZlclwiLCBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMFwiXHJcbiAgXTtcclxuXHJcbiAgaWYoYnVpbGRPcHRpb25zLmRlYnVnKSB7XHJcbiAgICBhcmdzLnB1c2goXCItLWRlYnVnXCIpO1xyXG4gIH1cclxuXHJcbiAgaWYoYnVpbGRPcHRpb25zLm1vYmlsZVNldHRpbmdzKSB7XHJcbiAgICBhcmdzLnB1c2goJy0tbW9iaWxlLXNldHRpbmdzJyk7XHJcbiAgICBhcmdzLnB1c2goSlNPTi5zdHJpbmdpZnkoYnVpbGRPcHRpb25zLm1vYmlsZVNldHRpbmdzKSk7XHJcbiAgfVxyXG5cclxuICBpZihidWlsZE9wdGlvbnMuc2VydmVyT25seSkge1xyXG4gICAgYXJncy5wdXNoKCctLXNlcnZlci1vbmx5Jyk7XHJcbiAgfVxyXG5cclxuICB2YXIgaXNXaW4gPSAvXndpbi8udGVzdChwcm9jZXNzLnBsYXRmb3JtKTtcclxuICBpZihpc1dpbikge1xyXG4gICAgLy8gU29tZXRpbWVzIGNtZC5leGUgbm90IGF2YWlsYWJsZSBpbiB0aGUgcGF0aFxyXG4gICAgLy8gU2VlOiBodHRwOi8vZ29vLmdsL0FEbXpvRFxyXG4gICAgZXhlY3V0YWJsZSA9IHByb2Nlc3MuZW52LmNvbXNwZWMgfHwgXCJjbWQuZXhlXCI7XHJcbiAgICBhcmdzID0gW1wiL2NcIiwgXCJtZXRlb3JcIl0uY29uY2F0KGFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgdmFyIG9wdGlvbnMgPSB7Y3dkOiBhcHBQYXRofTtcclxuICB2YXIgbWV0ZW9yID0gc3Bhd24oZXhlY3V0YWJsZSwgYXJncywgb3B0aW9ucyk7XHJcbiAgdmFyIHN0ZG91dCA9IFwiXCI7XHJcbiAgdmFyIHN0ZGVyciA9IFwiXCI7XHJcblxyXG4gIG1ldGVvci5zdGRvdXQucGlwZShwcm9jZXNzLnN0ZG91dCwge2VuZDogZmFsc2V9KTtcclxuICBtZXRlb3Iuc3RkZXJyLnBpcGUocHJvY2Vzcy5zdGRlcnIsIHtlbmQ6IGZhbHNlfSk7XHJcblxyXG4gIG1ldGVvci5vbignZXJyb3InLCAoZSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2cob3B0aW9ucyk7XHJcbiAgICBjb25zb2xlLmxvZyhlKTtcclxuICB9KTtcclxuICBtZXRlb3Iub24oJ2Nsb3NlJywgY2FsbGJhY2spO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhcmNoaXZlSXQoYnVpbGRMb2NhdGlvbiwgY2FsbGJhY2spIHtcclxuICBjYWxsYmFjayA9IF8ub25jZShjYWxsYmFjayk7XHJcbiAgdmFyIGJ1bmRsZVBhdGggPSBwYXRoUmVzb2x2ZShidWlsZExvY2F0aW9uLCAnYnVuZGxlLnRhci5neicpO1xyXG4gIHZhciBzb3VyY2VEaXIgPSBwYXRoUmVzb2x2ZShidWlsZExvY2F0aW9uLCAnYnVuZGxlJyk7XHJcblxyXG4gIHZhciBvdXRwdXQgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShidW5kbGVQYXRoKTtcclxuICB2YXIgYXJjaGl2ZSA9IGFyY2hpdmVyKCd0YXInLCB7XHJcbiAgICBnemlwOiB0cnVlLFxyXG4gICAgZ3ppcE9wdGlvbnM6IHtcclxuICAgICAgbGV2ZWw6IDZcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgYXJjaGl2ZS5waXBlKG91dHB1dCk7XHJcbiAgb3V0cHV0Lm9uY2UoJ2Nsb3NlJywgY2FsbGJhY2spO1xyXG5cclxuICBhcmNoaXZlLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIj0+IEFyY2hpdmluZyBmYWlsZWQ6XCIsIGVyci5tZXNzYWdlKTtcclxuICAgIGNhbGxiYWNrKGVycik7XHJcbiAgfSk7XHJcblxyXG4gIGFyY2hpdmUuZGlyZWN0b3J5KHNvdXJjZURpciwgJ2J1bmRsZScpLmZpbmFsaXplKCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gYnVpbGRBcHA7XHJcbiJdfQ==