'use strict';

require('babel-polyfill');
require('source-map-support/register');

var _modules = require('./modules/');

var _modules2 = _interopRequireDefault(_modules);

var _mupApi = require('./mup-api');

var _mupApi2 = _interopRequireDefault(_mupApi);

var _updates = require('./updates');

var _updates2 = _interopRequireDefault(_updates);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var settingsPath = void 0;
var configPath = void 0;
var args = process.argv.slice(2);

_commander2.default.arguments('<arg> [subarg]').action(argAction).option('--settings <filePath>', 'Meteor settings file', setSettingsPath).option('--config <filePath>', 'mup.js config file', setConfigPath).parse(process.argv);

function argAction(arg, subarg) {

  var moduleArg = arg;
  var command = subarg;

  if (!command && !_modules2.default[moduleArg]) {
    command = moduleArg;
    moduleArg = 'default';
  }

  var module = void 0;

  if (_modules2.default[moduleArg]) {
    module = _modules2.default[moduleArg];
  } else {
    console.error('No such module');
  }

  if (!command) {
    module.help(args);
    process.exit(0);
  }

  if (!module[command]) {
    console.error('error: unknown command %s', command);
    module.help(args);
    process.exit(1);
  }

  if (_commander2.default.settings) {
    args.splice(0, 2);
  }

  if (_commander2.default.config) {
    args.splice(0, 2);
  }

  (0, _updates2.default)().then(function () {
    var base = process.cwd();
    var api = new _mupApi2.default(base, args, configPath, settingsPath);
    module[command](api);
  });
}

function handleErrors(e) {
  console.log(e.name, e.message);
  process.exit(1);
}

function setSettingsPath(settingsPathArg) {
  settingsPath = settingsPathArg;
}

function setConfigPath(configPathArg) {
  configPath = configPathArg;
}

process.on('uncaughtException', handleErrors);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInNldHRpbmdzUGF0aCIsImNvbmZpZ1BhdGgiLCJhcmdzIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsImFyZ3VtZW50cyIsImFjdGlvbiIsImFyZ0FjdGlvbiIsIm9wdGlvbiIsInNldFNldHRpbmdzUGF0aCIsInNldENvbmZpZ1BhdGgiLCJwYXJzZSIsImFyZyIsInN1YmFyZyIsIm1vZHVsZUFyZyIsImNvbW1hbmQiLCJtb2R1bGUiLCJjb25zb2xlIiwiZXJyb3IiLCJoZWxwIiwiZXhpdCIsInNldHRpbmdzIiwic3BsaWNlIiwiY29uZmlnIiwidGhlbiIsImJhc2UiLCJjd2QiLCJhcGkiLCJoYW5kbGVFcnJvcnMiLCJlIiwibG9nIiwibmFtZSIsIm1lc3NhZ2UiLCJzZXR0aW5nc1BhdGhBcmciLCJjb25maWdQYXRoQXJnIiwib24iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUlBLHFCQUFKO0FBQ0EsSUFBSUMsbUJBQUo7QUFDQSxJQUFNQyxPQUFPQyxRQUFRQyxJQUFSLENBQWFDLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FBYjs7QUFFQSxvQkFDR0MsU0FESCxDQUNhLGdCQURiLEVBRUdDLE1BRkgsQ0FFVUMsU0FGVixFQUdHQyxNQUhILENBR1UsdUJBSFYsRUFHbUMsc0JBSG5DLEVBRzJEQyxlQUgzRCxFQUlHRCxNQUpILENBSVUscUJBSlYsRUFJaUMsb0JBSmpDLEVBSXVERSxhQUp2RCxFQUtHQyxLQUxILENBS1NULFFBQVFDLElBTGpCOztBQU9BLFNBQVNJLFNBQVQsQ0FBbUJLLEdBQW5CLEVBQXdCQyxNQUF4QixFQUFnQzs7QUFFOUIsTUFBSUMsWUFBWUYsR0FBaEI7QUFDQSxNQUFJRyxVQUFVRixNQUFkOztBQUVBLE1BQUcsQ0FBQ0UsT0FBRCxJQUFZLENBQUMsa0JBQVFELFNBQVIsQ0FBaEIsRUFBb0M7QUFDbENDLGNBQVVELFNBQVY7QUFDQUEsZ0JBQVksU0FBWjtBQUNEOztBQUVELE1BQUlFLGVBQUo7O0FBRUEsTUFBRyxrQkFBUUYsU0FBUixDQUFILEVBQXVCO0FBQ3JCRSxhQUFTLGtCQUFRRixTQUFSLENBQVQ7QUFDRCxHQUZELE1BRU87QUFDTEcsWUFBUUMsS0FBUixDQUFjLGdCQUFkO0FBQ0Q7O0FBRUQsTUFBRyxDQUFDSCxPQUFKLEVBQWE7QUFDWEMsV0FBT0csSUFBUCxDQUFZbEIsSUFBWjtBQUNBQyxZQUFRa0IsSUFBUixDQUFhLENBQWI7QUFDRDs7QUFFRCxNQUFJLENBQUNKLE9BQU9ELE9BQVAsQ0FBTCxFQUFzQjtBQUNwQkUsWUFBUUMsS0FBUixDQUFjLDJCQUFkLEVBQTJDSCxPQUEzQztBQUNBQyxXQUFPRyxJQUFQLENBQVlsQixJQUFaO0FBQ0FDLFlBQVFrQixJQUFSLENBQWEsQ0FBYjtBQUNEOztBQUVELE1BQUcsb0JBQVFDLFFBQVgsRUFBcUI7QUFDbkJwQixTQUFLcUIsTUFBTCxDQUFZLENBQVosRUFBZSxDQUFmO0FBQ0Q7O0FBRUQsTUFBRyxvQkFBUUMsTUFBWCxFQUFtQjtBQUNqQnRCLFNBQUtxQixNQUFMLENBQVksQ0FBWixFQUFlLENBQWY7QUFDRDs7QUFFRCwyQkFBZUUsSUFBZixDQUFvQixZQUFNO0FBQ3hCLFFBQU1DLE9BQU92QixRQUFRd0IsR0FBUixFQUFiO0FBQ0EsUUFBTUMsTUFBTSxxQkFBV0YsSUFBWCxFQUFpQnhCLElBQWpCLEVBQXVCRCxVQUF2QixFQUFtQ0QsWUFBbkMsQ0FBWjtBQUNBaUIsV0FBT0QsT0FBUCxFQUFnQlksR0FBaEI7QUFDRCxHQUpEO0FBS0Q7O0FBRUQsU0FBU0MsWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUI7QUFDdkJaLFVBQVFhLEdBQVIsQ0FBWUQsRUFBRUUsSUFBZCxFQUFvQkYsRUFBRUcsT0FBdEI7QUFDQTlCLFVBQVFrQixJQUFSLENBQWEsQ0FBYjtBQUNEOztBQUVELFNBQVNYLGVBQVQsQ0FBeUJ3QixlQUF6QixFQUEwQztBQUN4Q2xDLGlCQUFla0MsZUFBZjtBQUNEOztBQUVELFNBQVN2QixhQUFULENBQXVCd0IsYUFBdkIsRUFBc0M7QUFDcENsQyxlQUFha0MsYUFBYjtBQUNEOztBQUVEaEMsUUFBUWlDLEVBQVIsQ0FBVyxtQkFBWCxFQUFnQ1AsWUFBaEMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiQzovd2FtcDY0L3d3dy9tZXRlb3ItdXAvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZHVsZXMgZnJvbSAnLi9tb2R1bGVzLyc7XHJcbmltcG9ydCBNdXBBUEkgZnJvbSAnLi9tdXAtYXBpJztcclxuaW1wb3J0IGNoZWNrVXBkYXRlcyBmcm9tICcuL3VwZGF0ZXMnO1xyXG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xyXG5cclxubGV0IHNldHRpbmdzUGF0aDtcclxubGV0IGNvbmZpZ1BhdGg7XHJcbmNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XHJcblxyXG5wcm9ncmFtXHJcbiAgLmFyZ3VtZW50cygnPGFyZz4gW3N1YmFyZ10nKVxyXG4gIC5hY3Rpb24oYXJnQWN0aW9uKVxyXG4gIC5vcHRpb24oJy0tc2V0dGluZ3MgPGZpbGVQYXRoPicsICdNZXRlb3Igc2V0dGluZ3MgZmlsZScsIHNldFNldHRpbmdzUGF0aClcclxuICAub3B0aW9uKCctLWNvbmZpZyA8ZmlsZVBhdGg+JywgJ211cC5qcyBjb25maWcgZmlsZScsIHNldENvbmZpZ1BhdGgpXHJcbiAgLnBhcnNlKHByb2Nlc3MuYXJndik7XHJcblxyXG5mdW5jdGlvbiBhcmdBY3Rpb24oYXJnLCBzdWJhcmcpIHtcclxuXHJcbiAgbGV0IG1vZHVsZUFyZyA9IGFyZztcclxuICBsZXQgY29tbWFuZCA9IHN1YmFyZztcclxuXHJcbiAgaWYoIWNvbW1hbmQgJiYgIW1vZHVsZXNbbW9kdWxlQXJnXSkge1xyXG4gICAgY29tbWFuZCA9IG1vZHVsZUFyZztcclxuICAgIG1vZHVsZUFyZyA9ICdkZWZhdWx0JztcclxuICB9XHJcblxyXG4gIGxldCBtb2R1bGU7XHJcblxyXG4gIGlmKG1vZHVsZXNbbW9kdWxlQXJnXSkge1xyXG4gICAgbW9kdWxlID0gbW9kdWxlc1ttb2R1bGVBcmddO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdObyBzdWNoIG1vZHVsZScpO1xyXG4gIH1cclxuXHJcbiAgaWYoIWNvbW1hbmQpIHtcclxuICAgIG1vZHVsZS5oZWxwKGFyZ3MpO1xyXG4gICAgcHJvY2Vzcy5leGl0KDApO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFtb2R1bGVbY29tbWFuZF0pIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ2Vycm9yOiB1bmtub3duIGNvbW1hbmQgJXMnLCBjb21tYW5kKTtcclxuICAgIG1vZHVsZS5oZWxwKGFyZ3MpO1xyXG4gICAgcHJvY2Vzcy5leGl0KDEpO1xyXG4gIH1cclxuXHJcbiAgaWYocHJvZ3JhbS5zZXR0aW5ncykge1xyXG4gICAgYXJncy5zcGxpY2UoMCwgMik7XHJcbiAgfVxyXG5cclxuICBpZihwcm9ncmFtLmNvbmZpZykge1xyXG4gICAgYXJncy5zcGxpY2UoMCwgMik7XHJcbiAgfVxyXG5cclxuICBjaGVja1VwZGF0ZXMoKS50aGVuKCgpID0+IHtcclxuICAgIGNvbnN0IGJhc2UgPSBwcm9jZXNzLmN3ZCgpO1xyXG4gICAgY29uc3QgYXBpID0gbmV3IE11cEFQSShiYXNlLCBhcmdzLCBjb25maWdQYXRoLCBzZXR0aW5nc1BhdGgpO1xyXG4gICAgbW9kdWxlW2NvbW1hbmRdKGFwaSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUVycm9ycyhlKSB7XHJcbiAgY29uc29sZS5sb2coZS5uYW1lLCBlLm1lc3NhZ2UpO1xyXG4gIHByb2Nlc3MuZXhpdCgxKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0U2V0dGluZ3NQYXRoKHNldHRpbmdzUGF0aEFyZykge1xyXG4gIHNldHRpbmdzUGF0aCA9IHNldHRpbmdzUGF0aEFyZztcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q29uZmlnUGF0aChjb25maWdQYXRoQXJnKSB7XHJcbiAgY29uZmlnUGF0aCA9IGNvbmZpZ1BhdGhBcmc7XHJcbn1cclxuXHJcbnByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgaGFuZGxlRXJyb3JzKTtcclxuIl19